{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    token: null,\n    userId: null,\n    userName: null,\n    userEmail: null,\n    error: null,\n    loading: true,\n    logging: false\n  },\n  reducers: {\n    SET_LOGGING: (state, action) => {\n      state.logging = action.payload;\n    },\n    SET_LOADING: (state, action) => {\n      state.loading = action.payload;\n    },\n    SET_ERROR_NULL: (state, action) => {\n      state.error = null;\n    },\n    SET_ERROR: (state, action) => {\n      state.error = action.payload;\n    },\n    LOGIN: (state, action) => {\n      state.token = action.payload.token;\n      state.userId = action.payload.userId;\n      state.userName = action.payload.userName;\n      state.userEmail = action.payload.userEmail;\n    },\n    LOGOUT: (state, action) => {\n      state.token = null;\n      state.userId = null;\n      state.userEmail = null;\n      state.userName = null;\n      localStorage.removeItem(\"UpGive__token\");\n      localStorage.removeItem(\"UpGive__userId\");\n      localStorage.removeItem(\"UpGive__userName\");\n      localStorage.removeItem(\"UpGive__userEmail\");\n    }\n  }\n});\nexport const {\n  LOGIN,\n  LOGOUT,\n  SET_ERROR,\n  SET_ERROR_NULL,\n  SET_LOADING,\n  SET_LOGGING\n} = authSlice.actions;\nexport const AUTOLOGIN = () => async dispatch => {\n  dispatch(SET_LOADING(true));\n  const token = localStorage.getItem('UpGive__token'); // Will verify bearer jwt token with backend\n\n  if (token) {\n    const userId = localStorage.getItem('UpGive__userId');\n    const userName = localStorage.getItem('UpGive__userName');\n    const userEmail = localStorage.getItem('UpGive__userEmail');\n    await axios.post(\"http://localhost:5000/auth/verifyToken\", {\n      token: token\n    }).then(res => {\n      dispatch(LOGIN({\n        token: token,\n        userId: userId,\n        userName: userName,\n        userEmail: userEmail\n      }));\n    }).catch(err => {\n      console.log(err);\n      dispatch(LOGOUT());\n    });\n    dispatch(SET_LOADING(false));\n  } else dispatch(SET_LOADING(false));\n};\nexport const ASYNC_LOGIN = userData => dispatch => {\n  if (userData.logging) dispatch(SET_LOGGING(true));\n  dispatch(SET_LOADING(true));\n  const authData = {\n    email: userData.email,\n    password: userData.password\n  };\n  let URL = \"http://localhost:5000/auth/signin\"; // console.log(authData);\n\n  axios.post(URL, authData).then(response => {\n    const token = response.data.token;\n    const userId = response.data.userId;\n    localStorage.setItem('UpGive__token', token);\n    localStorage.setItem('UpGive__userId', userId);\n    localStorage.setItem('UpGive__userEmail', response.data.userEmail);\n    localStorage.setItem('UpGive__userName', response.data.userName);\n    dispatch(AUTOLOGIN());\n    dispatch(SET_LOADING(false));\n    dispatch(SET_LOGGING(false));\n  }).catch(err => {\n    console.log(err.response.data.message);\n    dispatch(SET_ERROR(err.response.data.message));\n    dispatch(SET_LOADING(false));\n    dispatch(SET_LOGGING(false));\n  });\n};\nexport const ASYNC_SIGNUP = authData => dispatch => {\n  if (authData.logging) dispatch(SET_LOGGING(true));\n  dispatch(SET_LOADING(true));\n  let URL = \"http://localhost:5000/auth/signup\";\n  axios.post(URL, authData).then(response => {\n    const token = response.data.token;\n    const userId = response.data.userId;\n    localStorage.setItem('UpGive__token', token);\n    localStorage.setItem('UpGive__userId', userId);\n    localStorage.setItem('UpGive__userEmail', response.data.userEmail);\n    localStorage.setItem('UpGive__userName', response.data.userName);\n    dispatch(AUTOLOGIN());\n    dispatch(SET_LOADING(false));\n    dispatch(SET_LOGGING(false));\n  }).catch(err => {\n    console.log(err.response.data.message);\n    dispatch(SET_ERROR(err.response.data.message));\n    dispatch(SET_LOADING(false));\n    dispatch(SET_LOGGING(false));\n  });\n};\nexport const selectUserData = state => state.auth;\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/Nodejs/UpGive/client/src/reduxSlices/authSlice.js"],"names":["createSlice","axios","authSlice","name","initialState","token","userId","userName","userEmail","error","loading","logging","reducers","SET_LOGGING","state","action","payload","SET_LOADING","SET_ERROR_NULL","SET_ERROR","LOGIN","LOGOUT","localStorage","removeItem","actions","AUTOLOGIN","dispatch","getItem","post","then","res","catch","err","console","log","ASYNC_LOGIN","userData","authData","email","password","URL","response","data","setItem","message","ASYNC_SIGNUP","selectUserData","auth","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        token: null,\r\n        userId: null,\r\n        userName:null,\r\n        userEmail:null,\r\n        error: null,\r\n        loading: true,\r\n        logging: false\r\n    },\r\n    reducers: {\r\n        SET_LOGGING: (state, action) => {\r\n            state.logging = action.payload;\r\n        },\r\n\r\n        SET_LOADING: (state, action) => {\r\n            state.loading = action.payload;\r\n        },\r\n\r\n        SET_ERROR_NULL: (state, action) => {\r\n            state.error = null;\r\n        },\r\n\r\n        SET_ERROR: (state, action) => {\r\n            state.error = action.payload;\r\n        },\r\n\r\n        LOGIN: (state, action) => {\r\n            state.token = action.payload.token;\r\n            state.userId = action.payload.userId;\r\n            state.userName = action.payload.userName;\r\n            state.userEmail = action.payload.userEmail;\r\n        },\r\n\r\n        LOGOUT: (state, action) => {\r\n            state.token = null;\r\n            state.userId = null;\r\n            state.userEmail = null;\r\n            state.userName = null;\r\n            localStorage.removeItem(\"UpGive__token\");\r\n            localStorage.removeItem(\"UpGive__userId\");\r\n            localStorage.removeItem(\"UpGive__userName\");\r\n            localStorage.removeItem(\"UpGive__userEmail\");\r\n        }\r\n    }\r\n})\r\n\r\nexport const { LOGIN, LOGOUT, SET_ERROR, SET_ERROR_NULL, SET_LOADING, SET_LOGGING } = authSlice.actions;\r\n\r\nexport const AUTOLOGIN = () => async dispatch => {\r\n  dispatch(SET_LOADING(true));\r\n  const token = localStorage.getItem('UpGive__token');\r\n  // Will verify bearer jwt token with backend\r\n  if(token) {\r\n    const userId = localStorage.getItem('UpGive__userId');\r\n    const userName = localStorage.getItem('UpGive__userName');\r\n    const userEmail = localStorage.getItem('UpGive__userEmail');\r\n    await axios.post(\"http://localhost:5000/auth/verifyToken\",{ token: token })\r\n    .then((res)=>{\r\n      dispatch(LOGIN({\r\n        token: token,\r\n        userId: userId,\r\n        userName: userName,\r\n        userEmail: userEmail\r\n      }))\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n      dispatch(LOGOUT());\r\n    })\r\n    dispatch(SET_LOADING(false));\r\n  } else\r\n    dispatch(SET_LOADING(false));\r\n}\r\n\r\nexport const ASYNC_LOGIN = userData => dispatch => {\r\n    \r\n  if(userData.logging)\r\n    dispatch(SET_LOGGING(true));\r\n      \r\n  dispatch(SET_LOADING(true));\r\n\r\n  const authData = {\r\n    email: userData.email,\r\n    password: userData.password,\r\n  }\r\n  let URL = \"http://localhost:5000/auth/signin\";\r\n  // console.log(authData);\r\n  axios.post(URL, authData)\r\n  .then(response => {\r\n    const token = response.data.token;\r\n    const userId = response.data.userId;\r\n    localStorage.setItem('UpGive__token', token);\r\n    localStorage.setItem('UpGive__userId', userId);\r\n    localStorage.setItem('UpGive__userEmail', response.data.userEmail);\r\n    localStorage.setItem('UpGive__userName', response.data.userName);\r\n    dispatch(AUTOLOGIN());\r\n    dispatch(SET_LOADING(false));\r\n    dispatch(SET_LOGGING(false));\r\n  })\r\n  .catch(err => {\r\n    console.log(err.response.data.message);\r\n    dispatch(SET_ERROR(err.response.data.message));\r\n    dispatch(SET_LOADING(false));\r\n    dispatch(SET_LOGGING(false));\r\n  })\r\n}\r\nexport const ASYNC_SIGNUP = authData => dispatch => {\r\n    \r\n  if(authData.logging)\r\n      dispatch(SET_LOGGING(true));\r\n      \r\n  dispatch(SET_LOADING(true));\r\n\r\n  let URL = \"http://localhost:5000/auth/signup\";\r\n  axios.post(URL, authData)\r\n  .then(response => {\r\n    const token = response.data.token;\r\n    const userId = response.data.userId;\r\n    localStorage.setItem('UpGive__token', token);\r\n    localStorage.setItem('UpGive__userId', userId);\r\n    localStorage.setItem('UpGive__userEmail', response.data.userEmail);\r\n    localStorage.setItem('UpGive__userName', response.data.userName);\r\n    dispatch(AUTOLOGIN());\r\n    dispatch(SET_LOADING(false));\r\n    dispatch(SET_LOGGING(false));\r\n  })\r\n  .catch(err => {\r\n    console.log(err.response.data.message);\r\n    dispatch(SET_ERROR(err.response.data.message));\r\n    dispatch(SET_LOADING(false));\r\n    dispatch(SET_LOGGING(false));\r\n  })\r\n}\r\n\r\nexport const selectUserData = state => state.auth;\r\n\r\nexport default authSlice.reducer;"]},"metadata":{},"sourceType":"module"}