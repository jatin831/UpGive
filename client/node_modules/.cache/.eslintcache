[{"C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\index.js":"1","C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\reduxStore\\store.js":"2","C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\App.js":"3","C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\reduxSlices\\authSlice.js":"4","C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\components\\Header\\header.jsx":"5","C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\components\\Header\\loginModals.jsx":"6","C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\components\\Home\\home.js":"7","C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\components\\Footer\\footer.jsx":"8","C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\components\\Dashboard\\dashboard.jsx":"9"},{"size":440,"mtime":1635566281497,"results":"10","hashOfConfig":"11"},{"size":195,"mtime":1635566260059,"results":"12","hashOfConfig":"11"},{"size":2077,"mtime":1635669072259,"results":"13","hashOfConfig":"11"},{"size":4428,"mtime":1635667317094,"results":"14","hashOfConfig":"11"},{"size":3765,"mtime":1635668229866,"results":"15","hashOfConfig":"11"},{"size":18731,"mtime":1635645351645,"results":"16","hashOfConfig":"11"},{"size":1815,"mtime":1635667517520,"results":"17","hashOfConfig":"11"},{"size":1665,"mtime":1635667523234,"results":"18","hashOfConfig":"11"},{"size":3015,"mtime":1635672202276,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"ilk2c1",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\index.js",[],["40","41"],"C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\reduxStore\\store.js",[],"C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\App.js",["42","43","44"],"C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\reduxSlices\\authSlice.js",[],"C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\components\\Header\\header.jsx",["45"],"C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\components\\Header\\loginModals.jsx",["46","47","48","49","50","51","52","53","54","55","56","57","58","59"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Modal, ModalBody, TabContent, TabPane } from \"reactstrap\";\r\nimport { withRouter, Redirect } from \"react-router-dom\";\r\nimport \"./loginmodals.css\";\r\nimport SingInImage from \"../../assets/signin.svg\";\r\nimport SingUpImage from \"../../assets/signup.svg\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport PermIdentityIcon from \"@material-ui/icons/PermIdentity\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport ContactPhoneOutlinedIcon from \"@material-ui/icons/ContactPhoneOutlined\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport axios from \"axios\";\r\nimport {\r\n  ASYNC_LOGIN,\r\n  ASYNC_SIGNUP,\r\n  selectUserData,\r\n  SET_ERROR_NULL,\r\n} from \"../../reduxSlices/authSlice\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"center\",\r\n    marginTop: \"10px\",\r\n    \"& .MuiInputLabel-formControl \": {\r\n      top: \"-6px\",\r\n      fontSize: \"18px\",\r\n      color: \"gray\",\r\n      // fontWeight: 'bold'\r\n    },\r\n    \"& .MuiInputBase-input::placeholder\": {\r\n      fontSize: \"14px\",\r\n    },\r\n    \"& .MuiFormLabel-filled\": {\r\n      backgroundColor: \"transparent !important\",\r\n    },\r\n    \"& .MuiInputBase-root\": {\r\n      paddingBottom: \"5px\",\r\n    },\r\n    \"& .MuiSelect-root\": {\r\n      paddingBottom: \"0px\",\r\n      fontSize: \"16px\",\r\n    },\r\n    \"& > .MuiButtonBase-root\": {\r\n      width: \"90%\",\r\n      marginTop: \"20px !important\",\r\n    },\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(2),\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nfunction validateEmail(email) {\r\n  // console.log(email);\r\n  const re =\r\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(String(email).toLowerCase());\r\n}\r\n\r\nfunction validatePassword(password) {\r\n  const regex_pass =\r\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!#%*?&]{8,20}$/;\r\n  return regex_pass.test(password);\r\n}\r\n\r\nconst LoginModal = (props) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const selectorData = useSelector(selectUserData);\r\n  const error = selectorData.error;\r\n  const loading = selectorData.loading;\r\n  const [contactError, setContactError] = useState(false);\r\n  const [emailError, setEmailError] = useState(false);\r\n  const [passwordError, setPasswordError] = useState(false);\r\n  const [activeTab, setActiveTab] = useState(\"1\");\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    contact: \"\",\r\n    showPassword: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(SET_ERROR_NULL());\r\n    setContactError(false);\r\n    setPasswordError(false);\r\n    setEmailError(false);\r\n    setValues({\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      contact: \"\",\r\n      showPassword: false,\r\n    });\r\n  }, [activeTab]);\r\n\r\n  useEffect(() => {\r\n    // console.log(selectorData);\r\n    if (selectorData.token) {\r\n      props.setShow(false);\r\n    }\r\n  }, [selectorData.token]);\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    if (prop === \"contact\" && isNaN(event.target.value)) {\r\n      return;\r\n    }\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const formSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    // console.log(\"Inside form submit\");\r\n    let flag = 0;\r\n\r\n    if (!validateEmail(values.email)) {\r\n      setEmailError(true);\r\n      flag = 1;\r\n    } else {\r\n      setEmailError(false);\r\n    }\r\n\r\n    if (!validatePassword(values.password)) {\r\n      setPasswordError(true);\r\n      flag = 1;\r\n    } else {\r\n      setPasswordError(false);\r\n    }\r\n\r\n    if (activeTab === \"2\" && values.contact.length !== 10) {\r\n      setContactError(true);\r\n      flag = 1;\r\n    } else {\r\n      setContactError(false);\r\n    }\r\n\r\n    if (flag) return;\r\n\r\n    if (activeTab === \"1\") {\r\n      dispatch(\r\n        ASYNC_LOGIN({\r\n          email: values.email,\r\n          password: values.password,\r\n          logging: true,\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(\r\n        ASYNC_SIGNUP({\r\n          email: values.email,\r\n          password: values.password,\r\n          name: values.name,\r\n          contact: values.contact,\r\n          logging: true,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        id=\"loginSignUp\"\r\n        isOpen={props.isModalOpen}\r\n        toggle={props.toggleModal}\r\n        className=\"login\"\r\n      >\r\n        <ModalBody className=\"auth-inner pt-5\">\r\n          <div className=\"row\">\r\n            <div className=\"col-6 d-flex justify-content-center\">\r\n              <button\r\n                className={\r\n                  activeTab == \"1\" ? \"active navigation-btn\" : \"navigation-btn\"\r\n                }\r\n                onClick={() => setActiveTab(\"1\")}\r\n                style={{ cursor: \"pointer\" }}\r\n              >\r\n                <h5 className=\"font-weight-bold pb-0 pt-2\">Login</h5>\r\n              </button>\r\n            </div>\r\n            <div className=\"col-6 d-flex justify-content-center\">\r\n              <button\r\n                className={\r\n                  activeTab == \"2\" ? \"active navigation-btn\" : \"navigation-btn\"\r\n                }\r\n                onClick={() => setActiveTab(\"2\")}\r\n                style={{ cursor: \"pointer\" }}\r\n              >\r\n                <h5 className=\"font-weight-bold pb-0 pt-2\">Sign Up</h5>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <TabContent activeTab={activeTab} className=\"mt-4\">\r\n            <TabPane tabId=\"1\">\r\n              {/* SIGN IN */}\r\n              <div className=\"row pb-5\">\r\n                <div className=\"col-lg-6 d-none d-lg-block px-md-5\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-12 d-flex justify-content-center align-items-center  \">\r\n                      <img src={SingUpImage} width=\"80%\" />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-12 d-flex justify-content-center align-items-center  forgot-password text-center pt-4\">\r\n                      Don't have an account{\" \"}\r\n                      <a\r\n                        className=\"or-signin pt-0 ps-1\"\r\n                        style={{ color: \"#167BFF !important\" }}\r\n                        onClick={() => setActiveTab(\"2\")}\r\n                      >\r\n                        {\" \"}\r\n                        sign up?\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-12 col-lg-6 px-md-5 mt-4\">\r\n                  <form className={classes.root}>\r\n                    <FormControl\r\n                      error={emailError}\r\n                      className={clsx(classes.margin, classes.textField)}\r\n                    >\r\n                      <InputLabel htmlFor=\"email\">Email</InputLabel>\r\n                      <Input\r\n                        placeholder=\"Type your email\"\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        margin=\"normal\"\r\n                        value={values.email}\r\n                        onChange={handleChange(\"email\")}\r\n                        startAdornment={\r\n                          <InputAdornment position=\"start\">\r\n                            <PermIdentityIcon />\r\n                          </InputAdornment>\r\n                        }\r\n                      />\r\n                      {emailError ? (\r\n                        <FormHelperText>Enter a valid Email ID</FormHelperText>\r\n                      ) : null}\r\n                    </FormControl>\r\n                    <FormControl\r\n                      error={passwordError}\r\n                      className={clsx(\r\n                        classes.margin,\r\n                        classes.textField,\r\n                        classes.formControl\r\n                      )}\r\n                    >\r\n                      <InputLabel htmlFor=\"password\">Password</InputLabel>\r\n                      <Input\r\n                        fullWidth\r\n                        placeholder=\"Type your password\"\r\n                        id=\"password\"\r\n                        type={values.showPassword ? \"text\" : \"password\"}\r\n                        value={values.password}\r\n                        onChange={handleChange(\"password\")}\r\n                        startAdornment={\r\n                          <InputAdornment position=\"start\">\r\n                            <LockOutlinedIcon />\r\n                          </InputAdornment>\r\n                        }\r\n                        endAdornment={\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              aria-label=\"toggle password visibility\"\r\n                              onClick={handleClickShowPassword}\r\n                              onMouseDown={handleMouseDownPassword}\r\n                            >\r\n                              {values.showPassword ? (\r\n                                <Visibility />\r\n                              ) : (\r\n                                <VisibilityOff />\r\n                              )}\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        }\r\n                      />\r\n                      {passwordError ? (\r\n                        <FormHelperText>\r\n                          Password must have at least 1 number 1 uppercase and\r\n                          lowercase character, 1 special symbol and between 8 to\r\n                          20 characters\r\n                        </FormHelperText>\r\n                      ) : null}\r\n                    </FormControl>\r\n                    <div className=\"d-flex flex-column align-items-center\">\r\n                      {loading ? (\r\n                        <CircularProgress className=\"display-block\" />\r\n                      ) : error ? (\r\n                        <p className=\"text-center text-danger mb-0 mt-3\">\r\n                          {error}\r\n                        </p>\r\n                      ) : null}\r\n                      <button\r\n                        onClick={formSubmitHandler}\r\n                        className=\"form-btn me-auto\"\r\n                      >\r\n                        Sign In\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </TabPane>\r\n            <TabPane tabId=\"2\">\r\n              {/* SIGN UP */}\r\n              <div className=\"row pb-4 mb-1\">\r\n                <div className=\"col-12 col-lg-6 px-md-5\">\r\n                  <form className={classes.root}>\r\n                    <FormControl\r\n                      error={emailError}\r\n                      className={clsx(classes.margin, classes.textField)}\r\n                    >\r\n                      <InputLabel htmlFor=\"email\">Full Name</InputLabel>\r\n                      <Input\r\n                        placeholder=\"Type your name\"\r\n                        fullWidth\r\n                        id=\"name\"\r\n                        type=\"name\"\r\n                        margin=\"normal\"\r\n                        value={values.name}\r\n                        onChange={handleChange(\"name\")}\r\n                        startAdornment={\r\n                          <InputAdornment position=\"start\">\r\n                            <PermIdentityIcon />\r\n                          </InputAdornment>\r\n                        }\r\n                      />\r\n                    </FormControl>\r\n                    <FormControl\r\n                      error={emailError}\r\n                      className={clsx(classes.margin, classes.textField)}\r\n                    >\r\n                      <InputLabel htmlFor=\"email\">Email</InputLabel>\r\n                      <Input\r\n                        placeholder=\"Type your email\"\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        margin=\"normal\"\r\n                        value={values.email}\r\n                        onChange={handleChange(\"email\")}\r\n                        startAdornment={\r\n                          <InputAdornment position=\"start\">\r\n                            <PermIdentityIcon />\r\n                          </InputAdornment>\r\n                        }\r\n                      />\r\n                      {emailError ? (\r\n                        <FormHelperText>Enter a valid Email ID</FormHelperText>\r\n                      ) : null}\r\n                    </FormControl>\r\n                    <FormControl\r\n                      error={passwordError}\r\n                      className={clsx(\r\n                        classes.margin,\r\n                        classes.textField,\r\n                        classes.formControl\r\n                      )}\r\n                    >\r\n                      <InputLabel htmlFor=\"password\">Password</InputLabel>\r\n                      <Input\r\n                        fullWidth\r\n                        placeholder=\"Type your password\"\r\n                        id=\"password\"\r\n                        type={values.showPassword ? \"text\" : \"password\"}\r\n                        value={values.password}\r\n                        onChange={handleChange(\"password\")}\r\n                        startAdornment={\r\n                          <InputAdornment position=\"start\">\r\n                            <LockOutlinedIcon />\r\n                          </InputAdornment>\r\n                        }\r\n                        endAdornment={\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              aria-label=\"toggle password visibility\"\r\n                              onClick={handleClickShowPassword}\r\n                              onMouseDown={handleMouseDownPassword}\r\n                            >\r\n                              {values.showPassword ? (\r\n                                <Visibility />\r\n                              ) : (\r\n                                <VisibilityOff />\r\n                              )}\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        }\r\n                      />\r\n                      {passwordError ? (\r\n                        <FormHelperText>\r\n                          Password must have at least 1 number 1 uppercase and\r\n                          lowercase character, 1 special symbol and between 8 to\r\n                          20 characters\r\n                        </FormHelperText>\r\n                      ) : null}\r\n                    </FormControl>\r\n                    <FormControl\r\n                      error={contactError}\r\n                      className={clsx(classes.margin, classes.textField)}\r\n                    >\r\n                      <InputLabel htmlFor=\"contact\">Contact Number</InputLabel>\r\n                      <Input\r\n                        placeholder=\"Type your Contact Number\"\r\n                        fullWidth\r\n                        id=\"contact\"\r\n                        type=\"text\"\r\n                        margin=\"normal\"\r\n                        value={values.contact}\r\n                        onChange={handleChange(\"contact\")}\r\n                        startAdornment={\r\n                          <InputAdornment position=\"start\">\r\n                            <ContactPhoneOutlinedIcon />\r\n                          </InputAdornment>\r\n                        }\r\n                      />\r\n                      {contactError ? (\r\n                        <FormHelperText>\r\n                          Enter a Valid Contact Number (10 digits only)\r\n                        </FormHelperText>\r\n                      ) : null}\r\n                    </FormControl>\r\n                    <div className=\"d-flex flex-column align-items-center\">\r\n                      {loading ? (\r\n                        <CircularProgress />\r\n                      ) : error ? (\r\n                        <p className=\"text-center text-danger mb-0 mt-3\">\r\n                          {error}\r\n                        </p>\r\n                      ) : null}\r\n                      <button\r\n                        onClick={formSubmitHandler}\r\n                        className=\"form-btn me-auto\"\r\n                      >\r\n                        Sign Up\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n                <div className=\"col-lg-6 d-none d-lg-block px-md-5\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-12 d-flex justify-content-center align-items-center pt-2\">\r\n                      <img src={SingInImage} width=\"95%\" />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-12 d-flex justify-content-center align-items-center  forgot-password text-center pt-4\">\r\n                      Already registered{\" \"}\r\n                      <a\r\n                        className=\"or-signin pt-0 ps-1\"\r\n                        style={{ color: \"#167BFF !important\" }}\r\n                        onClick={() => setActiveTab(\"1\")}\r\n                      >\r\n                        {\" \"}\r\n                        sign in?\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </TabPane>\r\n          </TabContent>\r\n        </ModalBody>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginModal;\r\n","C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\components\\Home\\home.js",[],"C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\components\\Footer\\footer.jsx",[],"C:\\Users\\Lenovo\\Desktop\\Nodejs\\UpGive\\client\\src\\components\\Dashboard\\dashboard.jsx",["60","61"],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":7,"column":10,"nodeType":"68","messageId":"69","endLine":7,"endColumn":23},{"ruleId":"66","severity":1,"message":"70","line":8,"column":8,"nodeType":"68","messageId":"69","endLine":8,"endColumn":13},{"ruleId":"71","severity":1,"message":"72","line":43,"column":6,"nodeType":"73","endLine":43,"endColumn":8,"suggestions":"74"},{"ruleId":"66","severity":1,"message":"75","line":19,"column":10,"nodeType":"68","messageId":"69","endLine":19,"endColumn":18},{"ruleId":"66","severity":1,"message":"76","line":4,"column":10,"nodeType":"68","messageId":"69","endLine":4,"endColumn":20},{"ruleId":"66","severity":1,"message":"77","line":4,"column":22,"nodeType":"68","messageId":"69","endLine":4,"endColumn":30},{"ruleId":"66","severity":1,"message":"78","line":20,"column":8,"nodeType":"68","messageId":"69","endLine":20,"endColumn":14},{"ruleId":"66","severity":1,"message":"79","line":21,"column":8,"nodeType":"68","messageId":"69","endLine":21,"endColumn":16},{"ruleId":"66","severity":1,"message":"80","line":23,"column":8,"nodeType":"68","messageId":"69","endLine":23,"endColumn":14},{"ruleId":"66","severity":1,"message":"70","line":25,"column":8,"nodeType":"68","messageId":"69","endLine":25,"endColumn":13},{"ruleId":"71","severity":1,"message":"72","line":116,"column":6,"nodeType":"73","endLine":116,"endColumn":17,"suggestions":"81"},{"ruleId":"71","severity":1,"message":"82","line":123,"column":6,"nodeType":"73","endLine":123,"endColumn":26,"suggestions":"83"},{"ruleId":"84","severity":1,"message":"85","line":202,"column":29,"nodeType":"86","messageId":"87","endLine":202,"endColumn":31},{"ruleId":"84","severity":1,"message":"85","line":213,"column":29,"nodeType":"86","messageId":"87","endLine":213,"endColumn":31},{"ruleId":"88","severity":1,"message":"89","line":229,"column":23,"nodeType":"90","endLine":229,"endColumn":60},{"ruleId":"91","severity":1,"message":"92","line":235,"column":23,"nodeType":"90","endLine":239,"endColumn":24},{"ruleId":"88","severity":1,"message":"89","line":473,"column":23,"nodeType":"90","endLine":473,"endColumn":60},{"ruleId":"91","severity":1,"message":"92","line":479,"column":23,"nodeType":"90","endLine":483,"endColumn":24},{"ruleId":"66","severity":1,"message":"93","line":6,"column":24,"nodeType":"68","messageId":"69","endLine":6,"endColumn":39},{"ruleId":"66","severity":1,"message":"94","line":7,"column":19,"nodeType":"68","messageId":"69","endLine":7,"endColumn":29},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["97"],"'scrolled' is assigned a value but never used.","'withRouter' is defined but never used.","'Redirect' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'Button' is defined but never used.",["98"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["99"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'setTransactions' is assigned a value but never used.","'setFriends' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},"Update the dependencies array to be: [dispatch]",{"range":"106","text":"107"},"Update the dependencies array to be: [activeTab, dispatch]",{"range":"108","text":"109"},"Update the dependencies array to be: [props, selectorData.token]",{"range":"110","text":"111"},[1412,1414],"[dispatch]",[3731,3742],"[activeTab, dispatch]",[3876,3896],"[props, selectorData.token]"]